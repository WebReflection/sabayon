const{ArrayBuffer:e,Atomics:t,Promise:s}=globalThis,{isArray:a}=Array,{create:r,getPrototypeOf:n,values:o}=Object,c=n(Int32Array),i=r(t),l=({currentTarget:e,type:t,origin:s,lastEventId:a,source:r,ports:n},o)=>e.dispatchEvent(new MessageEvent(t,{data:o,origin:s,lastEventId:a,source:r,ports:n})),p=()=>s.withResolvers();let f=0;const g=new Map,u=(e,t)=>class extends e{constructor(e,...s){super(e,...s),e instanceof t&&g.set(this,[f++,0,p()])}},d=new WeakSet,y=e=>(d.add(e),e),v=e=>null!==e&&"object"==typeof e&&!d.has(e),w=new WeakMap,h=(t,s,a)=>{if(g.has(t))s.set(t,g.get(t)[0]);else if(!(t instanceof c||t instanceof e))for(const e of o(t))v(e)&&!a.has(e)&&(a.add(e),h(e,s,a))},A=(...e)=>({value:new s((t=>{let s=new Worker("data:application/javascript,onmessage%3De%3D%3EpostMessage(!Atomics.wait(...e.data))");s.onmessage=()=>t("ok"),s.postMessage(e)}))}),k=(e,t)=>{const s=g.get(e),[a,r,{promise:n}]=s;return s[1]=t,[a,n]};let{Int32Array:m,SharedArrayBuffer:b,addEventListener:T,postMessage:E}=globalThis,I=e=>e,M=!0;const S=p();try{new b(4),i.waitAsync||(i.waitAsync=A),S.resolve()}catch(t){const{stringify:s,parse:r}=JSON,n=E,o=T,c=[];let p="",f="";b=class extends e{},m=u(m,b),I=y,i.notify=(e,t)=>{const[s]=(e=>w.get(e))(e);return n([p,1,e,s,t]),0},i.waitAsync=(...e)=>{const[t,s]=k(...e);return{value:s}},i.wait=(e,t,...a)=>{const[o]=k(e,t,...a);n([p,3,o,t]);const c=new XMLHttpRequest;c.open("POST",`${f}?sabayon`,!1),c.setRequestHeader("Content-Type","application/json"),c.send(s([p,o,t]));const i=r(c.responseText);g.delete(e);for(let t=0;t<i.length;t++)e[t]=i[t];return"ok"},o("message",(e=>{if(((e,t)=>{const{data:s}=e,r=a(s)&&(s.at(0)===t||0===s.at(1)&&!t);return r&&(e.stopImmediatePropagation(),e.preventDefault()),r})(e,p)){const[t,s,...a]=e.data;switch(s){case 0:p=t,f=a.at(0)?.serviceWorker||"",f||S.resolve();break;case 1:((e,t,s)=>{for(const[a,[r,n,{resolve:o}]]of g)if(t===r&&s===n){for(let t=0;t<e.length;t++)a[t]=e[t];g.delete(a),o("ok");break}})(...a);break;case 2:((e,t,s)=>{for(const[s,a]of t)w.set(s,[a,e.currentTarget]);l(e,s)})(e,...a);break;case 3:S.resolve()}}else if(M){const{currentTarget:t,type:s,origin:a,lastEventId:r,source:n,ports:o}=e;c.push([{currentTarget:t,type:s,origin:a,lastEventId:r,source:n,ports:o},e.data])}})),T=(e,...t)=>{if(o(e,...t),c.length)for(const e of c.splice(0))l(...e)},E=(e,...t)=>n(((e,t)=>{const s=new Map;return v(t)&&h(t,s,new Set),s.size?[e,2,s,t]:t})(p,e),...t)}await S.promise,M=!1;export{i as Atomics,m as Int32Array,b as SharedArrayBuffer,T as addEventListener,I as ignore,E as postMessage};
