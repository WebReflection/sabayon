var e=Promise.withResolvers.bind(Promise);let{SharedArrayBuffer:r}=globalThis;try{new r(4,{maxByteLength:8})}catch(e){r=class extends ArrayBuffer{get growable(){return super.resizable}grow(e){super.resize(e)}}}const{isArray:t}=Array,{isView:a}=ArrayBuffer,{create:s,defineProperty:o,setPrototypeOf:i}=Object,l=(e,r=!0)=>({configurable:!0,writable:r,value:e}),n=(e,r)=>t(e)&&2===e.length&&e[0]===r,f=e=>{e.stopImmediatePropagation(),e.preventDefault()},u=(e,t)=>async()=>{const a=await t.resolved(e);return o(e,"buffer",l(i(a,r.prototype),!1)),"ok"};export{l as asDescriptorValue,s as create,o as defineProperty,t as isArray,n as isChannel,a as isView,i as setPrototypeOf,f as stop,u as waitAsync,e as withResolvers};
