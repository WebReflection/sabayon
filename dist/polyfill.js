let{SharedArrayBuffer:e}=globalThis,t=!0;try{new e(4,{maxByteLength:8})}catch(s){t=!1,e=class extends ArrayBuffer{get growable(){return super.resizable}grow(e){super.resize(e)}}}const s=Promise.withResolvers.bind(Promise);const{isArray:r}=Array,{isView:o}=ArrayBuffer,{defineProperty:n,values:a}=Object;let i=()=>{};if(!t){globalThis.SharedArrayBuffer=e;const[t,l]=((e=e=>e)=>{const t=new Map;let r=0;return[()=>{let o;do{o=e(r++)}while(t.has(o));const n=s();return t.set(o,n),[o,n.promise]},(e,s,r)=>{const o=t.get(e);t.delete(e),r?o?.reject(r):o?.resolve(s)}]})(),c=new Map;if("importScripts"in globalThis){const s=function(e){for(let t=0;t<e.length;t++){const s=n.call(this,e[t]);if(s)return s}},n=function(t){if(t&&"object"==typeof t&&!this.has(t)){if(this.add(t),!o(t))return s.call(this,r(t)?t:a(t));if(t.buffer instanceof e){const e=b++;return c.set(t,e),[p,e,t]}}},i=e=>function(t,...s){const r=n.call(new Set,t);e.call(this,r?[...r,t]:t,...s)};globalThis.postMessage=i(globalThis.postMessage);const{prototype:f}=globalThis.MessagePort;f.postMessage=i(f.postMessage);const[g,d]=t();addEventListener("message",(e=>{l(g,e.data),e.stopImmediatePropagation(),e.preventDefault()}),{once:!0});const{wait:h}=Atomics;Atomics.wait=(t,...s)=>{if(t.buffer instanceof e){const e=new XMLHttpRequest;return e.open("POST",`${u}?sabayon`,!1),e.setRequestHeader("Content-Type","application/json"),e.send(JSON.stringify([p,c.get(t)])),t.set(JSON.parse(e.responseText)),c.delete(t),"ok"}return h(t,...s)};const[p,u]=await d;let b=Math.random()}else{const e=crypto.randomUUID(),s=new BroadcastChannel("dd78209b-186c-4f83-80e9-406becb7d9f3");s.onmessage=async t=>{const[r,o,n]=t.data;if(o===e)for(const[e,[t,o]]of c)if(t===n){await o.promise,c.delete(e);let t=e.length;for(;t--&&!e[t];);s.postMessage([r,e.slice(0,t+1)]);break}};const o=t=>{let{data:s}=t;if(r(s)&&s.at(0)===e){const[e,r,o,a]=s;c.set(o,[r,Promise.withResolvers()]),n(t,"data",{value:a})}};globalThis.MessageChannel=class extends globalThis.MessageChannel{constructor(){super(),this.port1.addEventListener("message",o),this.port2.addEventListener("message",o)}},globalThis.Worker=class extends globalThis.Worker{constructor(t,s){if(!f)throw new Error("ServiceWorker not registered");super(t,s).postMessage([e,f]),this.addEventListener("message",o)}};const{notify:a}=Atomics;Atomics.notify=(e,...t)=>{const s=c.get(e);return s?s[1].resolve():a(e,...t),0};let f="",g=null;const d=({serviceWorker:e},t)=>{let s,r=!0;e.getRegistration(f).then((t=>t??e.register(f))).then((function o(n){r=r&&!!e.controller,s=n.installing||n.waiting||n.active,"activated"===s.state?r?l(t):location.reload():s.addEventListener("statechange",(()=>o(n)),{once:!0})}))};i=e=>{if(!g){f=new URL(e,location.href).href;const[s,r]=t();d(navigator,s),g=r}return g}}}var l=i;export{l as default};
