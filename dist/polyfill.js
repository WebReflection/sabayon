var e=Promise.withResolvers.bind(Promise);let{SharedArrayBuffer:t}=globalThis,s=!0;try{new t(4,{maxByteLength:8})}catch(e){s=!1,t=class extends ArrayBuffer{get growable(){return super.resizable}grow(e){super.resize(e)}}}const{isArray:r}=Array,{isView:n}=ArrayBuffer,{defineProperty:o,values:a}=Object;let i=()=>{};if(!s){globalThis.SharedArrayBuffer=t;const[s,l]=((t=e=>e)=>{const s=new Map;let r=0;return[()=>{let n;do{n=t(r++)}while(s.has(n));const o=e();return s.set(n,o),[n,o.promise]},(e,t,r)=>{const n=s.get(e);s.delete(e),r?n?.reject(r):n?.resolve(t)}]})(),c=new Map;if("importScripts"in globalThis){const e=function(e,t){for(let s=0;s<t.length;s++){const r=o(e,t[s]);if(r)return r}},o=function(s,o){if(o&&"object"==typeof o&&!s.has(o)){if(s.add(o),!n(o))return e(s,r(o)?o:a(o));if(o instanceof Int32Array&&o.buffer instanceof t){const e=v++;return c.set(o,e),[m,e,o]}}},f=e=>function(t,...s){if(y){const r=o(new Set,t);e.call(this,r?[...r,t]:t,...s)}else h.then((()=>postMessage(t,...s)))};globalThis.postMessage=f(globalThis.postMessage);const{prototype:g}=globalThis.MessagePort;g.postMessage=f(g.postMessage);const[d,h]=s();addEventListener("message",(e=>{e.stopImmediatePropagation(),l(d,e.data)}),{once:!0});const{wait:p}=Atomics,{parse:u,stringify:b}=JSON;Atomics.wait=(e,...s)=>{if(e.buffer instanceof t){const t=new XMLHttpRequest;return t.open("POST",`${w}?sabayon`,!1),t.send(b([m,c.get(e)])),e.set(u(t.responseText)),c.delete(e),"ok"}return p(e,...s)};let m,w,y=!1,v=Math.random();h.then((e=>{[m,w]=e,y=!0})),i=()=>h}else{const t=crypto.randomUUID(),n=new BroadcastChannel("dd78209b-186c-4f83-80e9-406becb7d9f3");n.onmessage=async e=>{const[s,r,o]=e.data;if(r===t)for(const[e,[t,r]]of c)if(t===o){await r.promise,c.delete(e);let t=e.length;for(;t--&&!e[t];);n.postMessage([s,e.slice(0,t+1)]);break}};const a=s=>{let{data:n}=s;if(r(n)&&n.at(0)===t){const[t,r,a,i]=n;c.set(a,[r,e()]),o(s,"data",{value:i})}};globalThis.MessageChannel=class extends globalThis.MessageChannel{constructor(){super(),this.port1.addEventListener("message",a),this.port2.addEventListener("message",a)}},globalThis.Worker=class extends globalThis.Worker{constructor(e,s){if(!g)throw new Error("ServiceWorker not registered");super(e,s).postMessage([t,g]),this.addEventListener("message",a)}};const{notify:f}=Atomics;Atomics.notify=(e,...t)=>{const s=c.get(e);return s?s[1].resolve():f(e,...t),0};let g="",d=null;const h=({serviceWorker:e},t)=>{let s,r=!0;e.getRegistration(g).then((t=>t??e.register(g))).then((function n(o){r=r&&!!e.controller,s=o.installing||o.waiting||o.active,"activated"===s.state?r?l(t):location.reload():s.addEventListener("statechange",(()=>n(o)),{once:!0})}))};i=e=>{if(!d){g=new URL(e,location.href).href;const[t,r]=s();h(navigator,t),d=r}return d}}}var l=i;export{l as default};
